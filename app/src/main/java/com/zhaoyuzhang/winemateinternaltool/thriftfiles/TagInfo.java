/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.zhaoyuzhang.winemateinternaltool.thriftfiles;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2017-01-25")
public class TagInfo implements org.apache.thrift.TBase<TagInfo, TagInfo._Fields>, java.io.Serializable, Cloneable, Comparable<TagInfo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TagInfo");

  private static final org.apache.thrift.protocol.TField TAG_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("tagID", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField TAG_PASSWORD_FIELD_DESC = new org.apache.thrift.protocol.TField("tagPassword", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField AUTHENTICATION_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("authenticationKey", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField WINE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("wineID", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField ROLL_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("rollNumber", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField OPERATOR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("operatorID", org.apache.thrift.protocol.TType.STRING, (short)6);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TagInfoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TagInfoTupleSchemeFactory());
  }

  public String tagID; // required
  public String tagPassword; // required
  public String authenticationKey; // required
  public int wineID; // required
  public int rollNumber; // required
  public String operatorID; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TAG_ID((short)1, "tagID"),
    TAG_PASSWORD((short)2, "tagPassword"),
    AUTHENTICATION_KEY((short)3, "authenticationKey"),
    WINE_ID((short)4, "wineID"),
    ROLL_NUMBER((short)5, "rollNumber"),
    OPERATOR_ID((short)6, "operatorID");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TAG_ID
          return TAG_ID;
        case 2: // TAG_PASSWORD
          return TAG_PASSWORD;
        case 3: // AUTHENTICATION_KEY
          return AUTHENTICATION_KEY;
        case 4: // WINE_ID
          return WINE_ID;
        case 5: // ROLL_NUMBER
          return ROLL_NUMBER;
        case 6: // OPERATOR_ID
          return OPERATOR_ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __WINEID_ISSET_ID = 0;
  private static final int __ROLLNUMBER_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TAG_ID, new org.apache.thrift.meta_data.FieldMetaData("tagID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TAG_PASSWORD, new org.apache.thrift.meta_data.FieldMetaData("tagPassword", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.AUTHENTICATION_KEY, new org.apache.thrift.meta_data.FieldMetaData("authenticationKey", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.WINE_ID, new org.apache.thrift.meta_data.FieldMetaData("wineID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ROLL_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("rollNumber", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.OPERATOR_ID, new org.apache.thrift.meta_data.FieldMetaData("operatorID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TagInfo.class, metaDataMap);
  }

  public TagInfo() {
  }

  public TagInfo(
    String tagID,
    String tagPassword,
    String authenticationKey,
    int wineID,
    int rollNumber,
    String operatorID)
  {
    this();
    this.tagID = tagID;
    this.tagPassword = tagPassword;
    this.authenticationKey = authenticationKey;
    this.wineID = wineID;
    setWineIDIsSet(true);
    this.rollNumber = rollNumber;
    setRollNumberIsSet(true);
    this.operatorID = operatorID;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TagInfo(TagInfo other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetTagID()) {
      this.tagID = other.tagID;
    }
    if (other.isSetTagPassword()) {
      this.tagPassword = other.tagPassword;
    }
    if (other.isSetAuthenticationKey()) {
      this.authenticationKey = other.authenticationKey;
    }
    this.wineID = other.wineID;
    this.rollNumber = other.rollNumber;
    if (other.isSetOperatorID()) {
      this.operatorID = other.operatorID;
    }
  }

  public TagInfo deepCopy() {
    return new TagInfo(this);
  }

  @Override
  public void clear() {
    this.tagID = null;
    this.tagPassword = null;
    this.authenticationKey = null;
    setWineIDIsSet(false);
    this.wineID = 0;
    setRollNumberIsSet(false);
    this.rollNumber = 0;
    this.operatorID = null;
  }

  public String getTagID() {
    return this.tagID;
  }

  public TagInfo setTagID(String tagID) {
    this.tagID = tagID;
    return this;
  }

  public void unsetTagID() {
    this.tagID = null;
  }

  /** Returns true if field tagID is set (has been assigned a value) and false otherwise */
  public boolean isSetTagID() {
    return this.tagID != null;
  }

  public void setTagIDIsSet(boolean value) {
    if (!value) {
      this.tagID = null;
    }
  }

  public String getTagPassword() {
    return this.tagPassword;
  }

  public TagInfo setTagPassword(String tagPassword) {
    this.tagPassword = tagPassword;
    return this;
  }

  public void unsetTagPassword() {
    this.tagPassword = null;
  }

  /** Returns true if field tagPassword is set (has been assigned a value) and false otherwise */
  public boolean isSetTagPassword() {
    return this.tagPassword != null;
  }

  public void setTagPasswordIsSet(boolean value) {
    if (!value) {
      this.tagPassword = null;
    }
  }

  public String getAuthenticationKey() {
    return this.authenticationKey;
  }

  public TagInfo setAuthenticationKey(String authenticationKey) {
    this.authenticationKey = authenticationKey;
    return this;
  }

  public void unsetAuthenticationKey() {
    this.authenticationKey = null;
  }

  /** Returns true if field authenticationKey is set (has been assigned a value) and false otherwise */
  public boolean isSetAuthenticationKey() {
    return this.authenticationKey != null;
  }

  public void setAuthenticationKeyIsSet(boolean value) {
    if (!value) {
      this.authenticationKey = null;
    }
  }

  public int getWineID() {
    return this.wineID;
  }

  public TagInfo setWineID(int wineID) {
    this.wineID = wineID;
    setWineIDIsSet(true);
    return this;
  }

  public void unsetWineID() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __WINEID_ISSET_ID);
  }

  /** Returns true if field wineID is set (has been assigned a value) and false otherwise */
  public boolean isSetWineID() {
    return EncodingUtils.testBit(__isset_bitfield, __WINEID_ISSET_ID);
  }

  public void setWineIDIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __WINEID_ISSET_ID, value);
  }

  public int getRollNumber() {
    return this.rollNumber;
  }

  public TagInfo setRollNumber(int rollNumber) {
    this.rollNumber = rollNumber;
    setRollNumberIsSet(true);
    return this;
  }

  public void unsetRollNumber() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ROLLNUMBER_ISSET_ID);
  }

  /** Returns true if field rollNumber is set (has been assigned a value) and false otherwise */
  public boolean isSetRollNumber() {
    return EncodingUtils.testBit(__isset_bitfield, __ROLLNUMBER_ISSET_ID);
  }

  public void setRollNumberIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ROLLNUMBER_ISSET_ID, value);
  }

  public String getOperatorID() {
    return this.operatorID;
  }

  public TagInfo setOperatorID(String operatorID) {
    this.operatorID = operatorID;
    return this;
  }

  public void unsetOperatorID() {
    this.operatorID = null;
  }

  /** Returns true if field operatorID is set (has been assigned a value) and false otherwise */
  public boolean isSetOperatorID() {
    return this.operatorID != null;
  }

  public void setOperatorIDIsSet(boolean value) {
    if (!value) {
      this.operatorID = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TAG_ID:
      if (value == null) {
        unsetTagID();
      } else {
        setTagID((String)value);
      }
      break;

    case TAG_PASSWORD:
      if (value == null) {
        unsetTagPassword();
      } else {
        setTagPassword((String)value);
      }
      break;

    case AUTHENTICATION_KEY:
      if (value == null) {
        unsetAuthenticationKey();
      } else {
        setAuthenticationKey((String)value);
      }
      break;

    case WINE_ID:
      if (value == null) {
        unsetWineID();
      } else {
        setWineID((Integer)value);
      }
      break;

    case ROLL_NUMBER:
      if (value == null) {
        unsetRollNumber();
      } else {
        setRollNumber((Integer)value);
      }
      break;

    case OPERATOR_ID:
      if (value == null) {
        unsetOperatorID();
      } else {
        setOperatorID((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TAG_ID:
      return getTagID();

    case TAG_PASSWORD:
      return getTagPassword();

    case AUTHENTICATION_KEY:
      return getAuthenticationKey();

    case WINE_ID:
      return getWineID();

    case ROLL_NUMBER:
      return getRollNumber();

    case OPERATOR_ID:
      return getOperatorID();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TAG_ID:
      return isSetTagID();
    case TAG_PASSWORD:
      return isSetTagPassword();
    case AUTHENTICATION_KEY:
      return isSetAuthenticationKey();
    case WINE_ID:
      return isSetWineID();
    case ROLL_NUMBER:
      return isSetRollNumber();
    case OPERATOR_ID:
      return isSetOperatorID();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TagInfo)
      return this.equals((TagInfo)that);
    return false;
  }

  public boolean equals(TagInfo that) {
    if (that == null)
      return false;

    boolean this_present_tagID = true && this.isSetTagID();
    boolean that_present_tagID = true && that.isSetTagID();
    if (this_present_tagID || that_present_tagID) {
      if (!(this_present_tagID && that_present_tagID))
        return false;
      if (!this.tagID.equals(that.tagID))
        return false;
    }

    boolean this_present_tagPassword = true && this.isSetTagPassword();
    boolean that_present_tagPassword = true && that.isSetTagPassword();
    if (this_present_tagPassword || that_present_tagPassword) {
      if (!(this_present_tagPassword && that_present_tagPassword))
        return false;
      if (!this.tagPassword.equals(that.tagPassword))
        return false;
    }

    boolean this_present_authenticationKey = true && this.isSetAuthenticationKey();
    boolean that_present_authenticationKey = true && that.isSetAuthenticationKey();
    if (this_present_authenticationKey || that_present_authenticationKey) {
      if (!(this_present_authenticationKey && that_present_authenticationKey))
        return false;
      if (!this.authenticationKey.equals(that.authenticationKey))
        return false;
    }

    boolean this_present_wineID = true;
    boolean that_present_wineID = true;
    if (this_present_wineID || that_present_wineID) {
      if (!(this_present_wineID && that_present_wineID))
        return false;
      if (this.wineID != that.wineID)
        return false;
    }

    boolean this_present_rollNumber = true;
    boolean that_present_rollNumber = true;
    if (this_present_rollNumber || that_present_rollNumber) {
      if (!(this_present_rollNumber && that_present_rollNumber))
        return false;
      if (this.rollNumber != that.rollNumber)
        return false;
    }

    boolean this_present_operatorID = true && this.isSetOperatorID();
    boolean that_present_operatorID = true && that.isSetOperatorID();
    if (this_present_operatorID || that_present_operatorID) {
      if (!(this_present_operatorID && that_present_operatorID))
        return false;
      if (!this.operatorID.equals(that.operatorID))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_tagID = true && (isSetTagID());
    list.add(present_tagID);
    if (present_tagID)
      list.add(tagID);

    boolean present_tagPassword = true && (isSetTagPassword());
    list.add(present_tagPassword);
    if (present_tagPassword)
      list.add(tagPassword);

    boolean present_authenticationKey = true && (isSetAuthenticationKey());
    list.add(present_authenticationKey);
    if (present_authenticationKey)
      list.add(authenticationKey);

    boolean present_wineID = true;
    list.add(present_wineID);
    if (present_wineID)
      list.add(wineID);

    boolean present_rollNumber = true;
    list.add(present_rollNumber);
    if (present_rollNumber)
      list.add(rollNumber);

    boolean present_operatorID = true && (isSetOperatorID());
    list.add(present_operatorID);
    if (present_operatorID)
      list.add(operatorID);

    return list.hashCode();
  }

  @Override
  public int compareTo(TagInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetTagID()).compareTo(other.isSetTagID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTagID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tagID, other.tagID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTagPassword()).compareTo(other.isSetTagPassword());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTagPassword()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tagPassword, other.tagPassword);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAuthenticationKey()).compareTo(other.isSetAuthenticationKey());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAuthenticationKey()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authenticationKey, other.authenticationKey);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWineID()).compareTo(other.isSetWineID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWineID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.wineID, other.wineID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRollNumber()).compareTo(other.isSetRollNumber());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRollNumber()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rollNumber, other.rollNumber);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOperatorID()).compareTo(other.isSetOperatorID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOperatorID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.operatorID, other.operatorID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TagInfo(");
    boolean first = true;

    sb.append("tagID:");
    if (this.tagID == null) {
      sb.append("null");
    } else {
      sb.append(this.tagID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("tagPassword:");
    if (this.tagPassword == null) {
      sb.append("null");
    } else {
      sb.append(this.tagPassword);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("authenticationKey:");
    if (this.authenticationKey == null) {
      sb.append("null");
    } else {
      sb.append(this.authenticationKey);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("wineID:");
    sb.append(this.wineID);
    first = false;
    if (!first) sb.append(", ");
    sb.append("rollNumber:");
    sb.append(this.rollNumber);
    first = false;
    if (!first) sb.append(", ");
    sb.append("operatorID:");
    if (this.operatorID == null) {
      sb.append("null");
    } else {
      sb.append(this.operatorID);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TagInfoStandardSchemeFactory implements SchemeFactory {
    public TagInfoStandardScheme getScheme() {
      return new TagInfoStandardScheme();
    }
  }

  private static class TagInfoStandardScheme extends StandardScheme<TagInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TagInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TAG_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.tagID = iprot.readString();
              struct.setTagIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TAG_PASSWORD
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.tagPassword = iprot.readString();
              struct.setTagPasswordIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // AUTHENTICATION_KEY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.authenticationKey = iprot.readString();
              struct.setAuthenticationKeyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // WINE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.wineID = iprot.readI32();
              struct.setWineIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // ROLL_NUMBER
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.rollNumber = iprot.readI32();
              struct.setRollNumberIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // OPERATOR_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.operatorID = iprot.readString();
              struct.setOperatorIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TagInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.tagID != null) {
        oprot.writeFieldBegin(TAG_ID_FIELD_DESC);
        oprot.writeString(struct.tagID);
        oprot.writeFieldEnd();
      }
      if (struct.tagPassword != null) {
        oprot.writeFieldBegin(TAG_PASSWORD_FIELD_DESC);
        oprot.writeString(struct.tagPassword);
        oprot.writeFieldEnd();
      }
      if (struct.authenticationKey != null) {
        oprot.writeFieldBegin(AUTHENTICATION_KEY_FIELD_DESC);
        oprot.writeString(struct.authenticationKey);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(WINE_ID_FIELD_DESC);
      oprot.writeI32(struct.wineID);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ROLL_NUMBER_FIELD_DESC);
      oprot.writeI32(struct.rollNumber);
      oprot.writeFieldEnd();
      if (struct.operatorID != null) {
        oprot.writeFieldBegin(OPERATOR_ID_FIELD_DESC);
        oprot.writeString(struct.operatorID);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TagInfoTupleSchemeFactory implements SchemeFactory {
    public TagInfoTupleScheme getScheme() {
      return new TagInfoTupleScheme();
    }
  }

  private static class TagInfoTupleScheme extends TupleScheme<TagInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TagInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetTagID()) {
        optionals.set(0);
      }
      if (struct.isSetTagPassword()) {
        optionals.set(1);
      }
      if (struct.isSetAuthenticationKey()) {
        optionals.set(2);
      }
      if (struct.isSetWineID()) {
        optionals.set(3);
      }
      if (struct.isSetRollNumber()) {
        optionals.set(4);
      }
      if (struct.isSetOperatorID()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetTagID()) {
        oprot.writeString(struct.tagID);
      }
      if (struct.isSetTagPassword()) {
        oprot.writeString(struct.tagPassword);
      }
      if (struct.isSetAuthenticationKey()) {
        oprot.writeString(struct.authenticationKey);
      }
      if (struct.isSetWineID()) {
        oprot.writeI32(struct.wineID);
      }
      if (struct.isSetRollNumber()) {
        oprot.writeI32(struct.rollNumber);
      }
      if (struct.isSetOperatorID()) {
        oprot.writeString(struct.operatorID);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TagInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        struct.tagID = iprot.readString();
        struct.setTagIDIsSet(true);
      }
      if (incoming.get(1)) {
        struct.tagPassword = iprot.readString();
        struct.setTagPasswordIsSet(true);
      }
      if (incoming.get(2)) {
        struct.authenticationKey = iprot.readString();
        struct.setAuthenticationKeyIsSet(true);
      }
      if (incoming.get(3)) {
        struct.wineID = iprot.readI32();
        struct.setWineIDIsSet(true);
      }
      if (incoming.get(4)) {
        struct.rollNumber = iprot.readI32();
        struct.setRollNumberIsSet(true);
      }
      if (incoming.get(5)) {
        struct.operatorID = iprot.readString();
        struct.setOperatorIDIsSet(true);
      }
    }
  }

}

